/**
 * @fileoverview This is the main entry point for the Telegram Moderator Bot application.
 * It initializes services, loads configuration, and sets up event listeners.
 */

import bot from './services/telegram.js';
import { initDb } from './services/database.js';
import { handleMessage } from './handlers/messageHandler.js';
import { handleCommand } from './handlers/commandHandler.js';
import { handleCallback } from './handlers/callbackHandler.js';
import config, { loadSettingsFromDb } from './config/index.js';
import logger from './services/logger.js';

/**
 * The main asynchronous function that starts the bot.
 */
const main = async () => {
    logger.info('Starting bot...');

    // 1. Initialize the database connection and ensure tables are created.
    await initDb();

    // 2. Load all persistent settings from the database into the global config object.
    await loadSettingsFromDb();
    logger.info('Configuration loaded from database.');

    // 3. Register a listener for all incoming messages.
    bot.on('message', (msg) => {
        // Route the message to the appropriate handler based on its content.
        if (msg.text && msg.text.startsWith('/')) {
            // If the message is a command (starts with '/'), use the command handler.
            handleCommand(msg);
        } else {
            // Otherwise, process it as a regular chat message for moderation.
            handleMessage(msg);
        }
    });

    // 4. Register a listener for callback queries, which are generated by inline keyboard buttons.
    bot.on('callback_query', handleCallback);

    // Set up a listener for polling errors to prevent the bot from crashing silently.
    bot.on('polling_error', (error) => {
        logger.error(`Polling error: ${error.code} - ${error.message}`);
    });

    logger.info(`ðŸš€ Bot is running! Watching for messages...`);
    logger.info(`Admin User ID: ${process.env.ADMIN_USER_ID}`);
    // Log some initial configuration values for easier debugging.
    logger.info(`Initial Spam Threshold: ${config.spamThreshold}`);
    logger.info(`Initial Moderator IDs: ${config.moderatorIds.join(', ')}`);
};

// Execute the main function and handle any fatal startup errors.
main().catch(err => {
    logger.error('Failed to start bot:', err);
    process.exit(1); // Exit the process with an error code.
});